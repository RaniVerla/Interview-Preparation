Microservices Design principles:

Microservice design principle #1: Reuse
Reuse continues to be a principle of microservice design. However, the scope of reuse has been reduced to specific domains within the 
business. The effort of designing for this reuse, which in the early days of SOA included wasted efforts in designing enterprise-wide
canonical models, was fruitless because it was too ambitious.
However, it must be noted that the canonical model in its restricted scope can be of benefit. In line with the reuse it facilitates,
its scope has been reduced. With the ‘merit based reuse’ approach, an emerging model is preferred over a predetermined one.
Teams can agree on communication models for deciding how microservices must be adapted for use outside the contexts in which they were
designed.
A collaboration hub like Anypoint Exchange encourages merit-based reuse with reviews and ratings. If an existing microservice API does
not suit your domain or ‘business group’, you might be better off building another microservice that does it.

Microservice design principle #2: Loose coupling
Dependencies between services and their consumers are minimized with the application of the principle of loose coupling. By standardizing
on contracts as expressed through business oriented APIs, consumers are not impacted by changes in the implementation of the service. 
This allows the service owners to change the implementation and switch out or modify the systems of record or even service compositions
which may lie behind the interface and replace them without any downstream impact.

Microservice design principle #3: Autonomy
Autonomy is a measure of control that the implementation of the service has over its runtime environment and database schema. 
This enhances the performance and reliability of the service and gives consumers more guarantees about the quality of service they 
can expect from it. Coupled with statelessness, autonomy also contributes to the overall availability and scalability of the service.

Microservice design principle #4: Fault tolerance
Each service is necessarily fault tolerant so that failures on the side of its collaborating services will have minimal impact on its
own SLA. Services, by virtue of being independent of each other, have the opportunity to cut off communication to a failed service. 
This technique, called a “circuit breaker” and inspired by the electrical component of the same name, stops individual service failures 
from propagating through the larger, distributed system.

Microservice design principle #5: Composability
All of these design principles mentioned able contribute to the principle of composability which allows the service to deliver value
to the business in different contexts. Its composition together with other services to form a new service aggregate is effectively 
the new form of application development.

Microservice design principle #6: Discoverability
The aim of discoverability is to communicate to all interested parties a clear understanding of the business purpose and technical
interface of the microservice. Thus, the service must be published in a way that ensures that developers of client software have 
everything they need to easily consume it
